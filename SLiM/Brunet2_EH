// set up a simple neutral simulation
initialize() {
	initializeSLiMModelType("nonWF");
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 1);
	initializeRecombinationRate(0);
	defineConstant('N', 316);
	defineConstant('N0', 50);
	initializeTreeSeq();
}

reproduction(){
	U = runif(rpois(1, N0));
	if (size(U) != 0){
		X = sapply(U, 'log(1-applyValue) - log(N0);');
		X = sapply(U, 'applyValue + individual.tagF;');
		for (x in X){
			child = subpop.addCloned(individual);
			child.tagF = x;
		}
	}
}

survival(){
	if (individual.age > 0){return F;}
	else {	
		if (individual.tagF < min_fitness){return F;} else {		
			return T;
		}
	}
}

// create a population of 500 individuals
1 early() {
	sim.addSubpop("p1", N);
	p1.individuals.tagF = 1.0;
	defineConstant('start_time', clock());
}

//NO REPRODUCTION at tick 1
//first -> reproduction -> early -> fitnessEffect -> survival -> late

1: early(){
	children = p1.individuals[p1.individuals.age == 0];
	sorted_fitness = sort(children.tagF, ascending=F);
	defineGlobal('min_fitness', sorted_fitness[N-1]);
}

2: late(){
	if (log(community.tick)/log(10) % 1 <= 1e-3){
		print("Tick " + community.tick + " attained in " + (clock() - start_time) + " seconds");
	}
}


(10*N):(10 + 10*N) late(){
	sim.treeSeqOutput("Brunet2 " + N + "EHgen" + community.tick + ".trees");
}

//L'ARBRE EST EN DOUBLE PARCE QUE HAPLOIDE !!!!!!!!!// set up a simple neutral simulation