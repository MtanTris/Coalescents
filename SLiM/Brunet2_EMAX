// set up a simple neutral simulation
initialize() {
	initializeSLiMModelType("nonWF");
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 1000);
	initializeRecombinationRate(0);
	defineConstant('N', 316);
	defineConstant('N0', 50);
	initializeTreeSeq(checkCoalescence=T);
	defineGlobal('counter', 0);
	initializeSex();
}

reproduction(){
	if (individual.sex == 'F'){
		U = runif(rpois(1, N0));
		if (size(U) != 0){
			X = sapply(U, 'log(1-applyValue) - log(N0);');
			for (x in X){
				mate = subpop.sampleIndividuals(1, sex='M', minAge=1);
				child = subpop.addCrossed(individual, mate);
				child.tagF = x + max(individual.tagF, mate.tagF);
			}
		}
	}
}

survival(){
	if (individual.age > 0){return F;}
	else {	
		if (individual.tagF < min_fitness){return F;} else {		
			return T;
		}
	}
}

// create a population of 500 individuals
1 early() {
	sim.addSubpop("p1", N);
	p1.individuals.tagF = 1.0;
	defineConstant('start_time', clock());
}

//NO REPRODUCTION at tick 1
//first -> reproduction -> early -> fitnessEffect -> survival -> late

1: early(){
	children = p1.individuals[p1.individuals.age == 0];
	sorted_fitness = sort(children.tagF, ascending=F);
	defineGlobal('min_fitness', sorted_fitness[N-1]);
}

2: late(){
	if (sim.treeSeqCoalesced()){
		sim.treeSeqOutput("Brunet2 " + N + "EMAXgen" + community.tick + ".trees");
		defineGlobal('counter', counter+1);
		if (counter == 10){
			sim.simulationFinished();
		}
	}
}

1e7 late(){
	sim.simulationFinished();
}