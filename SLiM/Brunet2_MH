// set up a simple neutral simulation
initialize() {
	initializeSLiMModelType("nonWF");
	initializeMutationRate(1e-4);        //inverse of size of genomic element
	initializeMutationType("m1", 0.5, "n", 0, 0.5);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 1e4); 
	initializeRecombinationRate(0);
	defineConstant('N', 100);
	defineConstant('CHILDS_PER_IND', 2);
	initializeTreeSeq();
	defineGlobal('minFitness', 0);
}

reproduction(){
	child = subpop.addCloned(individual, count=2);
}

survival(){
	if (individual.age > 0){return F;}
	else {
		muts = individual.haploidGenome1.mutations;
		fitness_ind = 0.0;
		for (m in muts){
			fitness_ind = fitness_ind + m.selectionCoeff;
			}
		if (fitness_ind >= minFitness){return T;}
		else {return F;}
	}
}

2: early(){
	children = p1.individuals[p1.individuals.age == 0];
	fitness = sapply(children, "muts = applyValue.haploidGenome1.mutations;fitness = 0.0;for (m in muts){fitness = fitness + m.selectionCoeff;}return fitness;");
	defineGlobal('minFitness', sort(fitness, ascending=F)[N-1]);
}

// create a population of 500 individuals
1 early() {
	sim.addSubpop("p1", N, haploid=T);
	p1.individuals.tagF = 1.0;
	defineConstant('start_time', clock());
}

//NO REPRODUCTION at tick 1
//first -> reproduction -> early -> fitnessEffect -> survival -> late


2: late(){
	if (log(community.tick)/log(10) % 1 <= 1e-3){
		print("Tick " + community.tick + " attained in " + (clock() - start_time) + " seconds");
	}
}


(10*N):(200 + 10*N) late(){
	sim.treeSeqOutput("Brunet2 " + N + "MHgen" + community.tick + ".trees");
}

//L'ARBRE EST EN DOUBLE PARCE QUE HAPLOIDE !!!!!!!!!// set up a simple neutral simulation